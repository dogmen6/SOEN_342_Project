import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class TempMonitor {
    private List<Sensor_Type> sensors = new ArrayList();
    private Map<Integer, List<Integer>> temperatureToLocations = new HashMap();
    private Map<Integer, Double> locationToTemperature = new HashMap();

    public void addSensor(Sensor_Type sensor) {
        sensors.add(sensor);
    }

    public void addDeployedSensor(Deployed_Sensor deployedSensor, int sensorTypeId) {
        // Associate the deployed sensor with a specific sensor type based on sensorTypeId
        for (Sensor_Type sensor : sensors) {
            if (sensor.getSensorTypeId() == sensorTypeId) {
                sensor.addDeployedSensor(deployedSensor);
                int temperatureId = deployedSensor.getTemperature().getTemperatureId();
                int locationId = deployedSensor.getLocation().getLocationId();

                if (!temperatureToLocations.containsKey(temperatureId)) {
                    temperatureToLocations.put(temperatureId, new ArrayList());
                }
                temperatureToLocations.get(temperatureId).add(locationId);

                locationToTemperature.put(locationId, deployedSensor.getTemperature().getTemperatureValue());
                return;
            }
        }
    }


    public void sendMessageToSensor(int sensorId, Message message) {
        // Implement sending a message to the specified sensor
    }

    public double getTemperatureOfLocation(int locationId) {
        if (locationToTemperature.containsKey(locationId)) {
            return locationToTemperature.get(locationId);
        }
        return -1.0; // Indicates temperature not found for the location
    }

    public List<Integer> getLocationsOfTemperature(int temperatureId) {
        if (temperatureToLocations.containsKey(temperatureId)) {
            return temperatureToLocations.get(temperatureId);
        }
        return new ArrayList(); // Indicates no locations found for the temperature
    }
}
